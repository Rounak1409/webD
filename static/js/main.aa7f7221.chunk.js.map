{"version":3,"sources":["pages/graphs/components/circle.svg","pages/graphs/components/CircleIcon.js","pages/graphs/components/GraphNode.js","pages/graphs/components/Line.js","pages/graphs/components/MenuBar.js","pages/graphs/classes/Edge.js","redux/graphActions.js","pages/graphs/components/RenderEdge.js","pages/graphs/components/DijkstraDescription.js","pages/graphs/components/BellmanFordDescription.js","pages/graphs/components/DijkstraLegend.js","pages/graphs/components/BellmanFordLegend.js","pages/graphs/helpers/constants.js","pages/graphs/classes/Node.js","pages/graphs/helpers/clickHandlers.js","pages/graphs/helpers/dijkstra.js","pages/graphs/helpers/bellmanFord.js","pages/graphs/GraphsPage.js","pages/HomePage.js","pages/search/components/BarSearch.js","pages/search/components/BinSearchDescription.js","pages/search/components/Legend.js","pages/search/components/SearchArray.js","pages/search/SearchPage.js","pages/sort/components/BarSort.js","pages/sort/components/Legend.js","pages/sort/helpers/knuthShuffle.js","pages/sort/helpers/insertionSort.js","pages/sort/helpers/bubbleSort.js","pages/sort/helpers/selectionSort.js","pages/sort/helpers/mergeSort.js","pages/sort/components/SortArray.js","pages/sort/SortPage.js","pages/dataStructures/classes/BSTNode.js","pages/dataStructures/classes/BSTTreeData.js","pages/dataStructures/components/BinarySearchTree.js","pages/dataStructures/classes/AVLNode.js","pages/dataStructures/classes/AVLTreeData.js","pages/dataStructures/components/AVLTree.js","pages/dataStructures/DSPage.js","App.js","serviceWorker.js","redux/graphReducer.js","index.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","type","_ref3","d","fill","_ref","svgRef","title","props","t","className","viewBox","width","height","ref","ForwardRef","forwardRef","CircleIcon","normalStyle","fontSize","selectedStyle","border","borderRadius","startingNodeStyle","endingNodeStyle","neighborNodeStyle","component","Circle","style","selected","isNeighbor","isStart","isEnd","GraphNode","x","y","position","left","top","index","onClick","textAlign","Line","data","x1","x2","y1","y2","isShortest","zIndex","strokeWidth","stroke","animationDelay","wait","MenuBar","useState","current","setCurrent","e","selectedKeys","mode","map","disabled","Item","value","text","renderData","Edge","nodeA","nodeB","weight","node","modEdge","edge","RenderEdge","edges","setEdges","dispatch","negWts","id","min","max","onChange","newEdges","newEdge","push","DijkstraDescription","visible","setVisible","margin","onOk","onCancel","BellmanFordDescription","Legend","color","BellmanFordLegend","ADD","ADDNODEINFO","Node","costToReach","Number","MAX_SAFE_INTEGER","parent","onClickReset","setNodes","setCurrState","setLatestNodeId","setStartEndNodePair","setInfoText","setCurrentNode","setNeighborNode","setShortestPath","element","operation","resetSelectedNode","currState","dijkstra","nodes","startEndNodePair","readOnlyState","helperDelay","a","helperSort","nodesQueue","sort","nodesMap","isVisited","newNode","dest","nextNode","shift","pair","path","currentNode","parentNode","nextNodeNeighbors","curr","neighborId","other","j","includes","tempCostToReach","bellmanFord","message","edgesMap","neighborsArr","neighborNode","find","wt","didRelax","u","v","error","Option","GraphsPage","shortestPath","latestNodeId","infoText","modifyEdge","setModifyEdge","graphAlgo","setGraphAlgo","useDispatch","useSelector","state","graph","ms","Promise","res","setTimeout","menuData","onClickAddNodeButton","onClickDelNodeButton","onClickAddEdgeButton","onClickDelEdgeButton","onClickRunButton","showIcon","icon","background","borderColor","temp","Math","abs","clientX","clientY","addNode","handleAddNode","tempNodes","tempEdges","onClickDelNode","addEdge","nodePair","containsNode","delEdge","onClickSelectNode","verifyStartEndNodes","child","DijkstraLegend","HomePage","history","display","flexDirection","justifyContent","align","span","autoplay","to","opacity","fontWeight","alignSelf","BarSearch","mid","outOfRange","BinSearchDescription","SearchArray","searchVal","setSearchVal","initialRange","val","isMid","isOutOfRange","range","setRange","binarySearch","num","console","log","low","high","floor","size","marginBottom","marginRight","bar","numTotalBars","leftInterval","heightInterval","renderBar","SearchPage","textDecoration","BarSort","isSorted","isMin","underConsideration","knuthShuffle","barArr","r","random","insertionSort","sortedArr","sortedTempArr","k","bubbleSort","selectionSort","currMin","mergeSort","subSize","currIndex","firstArr","secondArr","currPtr","firstPtr","secondPtr","highIndex","lowerIndex","deepCopyValAndIsSorted","firstEle","secondEle","deepCopyOnlyVal","arr","SortArray","sortingAlgo","setSortingAlgo","sortingInProgress","setSortingInProgress","handleSort","marginLeft","newRange","randomize","SortPage","BSTNode","right","checkLeft","checkRight","checkPtrs","leftChild","rightChild","isLeaf","search","setParent","setLeft","add","setRight","findMin","findMax","nearestNode","nearestNodeParent","delNode","successorNode","succRightChild","succParent","succIsRightChild","delete","children","getData","name","BSTTreeData","rootNode","searchedNode","successor","predeccesor","BinarySearchTree","treeContainer","setTreeContainer","translate","setTranslate","treeData","setTreeData","setKey","useEffect","dimensions","getBoundingClientRect","tc","orientation","transitionDuration","marginTop","defaultValue","shape","success","succ","pred","AVLNode","leftChildHeight","rightChildHeight","checkRI","setHeight","violatedNode","isLeftHeavy","rightRotate","isRightHeavy","leftRotate","startNode","balancedNode","balanceOneViolation","grandparent","maintainHeight","balanceAllViolation","attributes","Height","AVLTreeData","presentNum","randIndex","deleteKey","splice","insertKey","AVLTree","DSPage","ds","setDs","App","exact","Boolean","window","location","hostname","match","graphReducer","action","newState","newNodeId","delNodeId","newArr","filter","otherWtP","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa7f7221.chunk.js","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", {\n  type: \"text/css\"\n}));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M950.857143 512q0 119.428571-58.857143 220.285714t-159.714286 159.714286-220.285714 58.857143-220.285714-58.857143-159.714286-159.714286-58.857143-220.285714 58.857143-220.285714 159.714286-159.714286 220.285714-58.857143 220.285714 58.857143 159.714286 159.714286 58.857143 220.285714z\",\n  \"p-id\": 1102,\n  fill: \"#84b3f6\"\n});\n\nvar SvgCircle = function SvgCircle(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    t: 1579468677682,\n    className: \"icon\",\n    viewBox: \"0 0 1024 1024\",\n    \"p-id\": 1101,\n    width: 64,\n    height: 64,\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgCircle, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/circle.ebdc7763.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport {Icon} from 'antd';\nimport {ReactComponent as Circle} from './circle.svg';\n\nfunction CircleIcon(props) {\n  /*\n    borderStyle: 'solid',\n    borderRadius: '50%',\n    borderColor: 'yellow',\n    */\n  const normalStyle = {\n    fontSize: '100px',\n  };\n\n  const selectedStyle = {\n    fontSize: '110px',\n    border: '5px solid yellowgreen',\n    borderRadius: '50%',\n  };\n\n  const startingNodeStyle = {\n    fontSize: '110px',\n    border: '5px solid black',\n    borderRadius: '50%',\n  };\n\n  const endingNodeStyle = {\n    fontSize: '110px',\n    border: '5px solid red',\n    borderRadius: '50%',\n  };\n\n  const neighborNodeStyle = {\n    fontSize: '110px',\n    border: '5px solid yellow',\n    borderRadius: '50%',\n  };\n\n  const determineStyle = () => {\n    if (props.selected) {\n      return selectedStyle;\n    } else if (props.isNeighbor) {\n      return neighborNodeStyle;\n    } else if (props.isStart) {\n      return startingNodeStyle;\n    } else if (props.isEnd) {\n      return endingNodeStyle;\n    } else {\n      return normalStyle;\n    }\n  };\n  return <Icon component={Circle} style={determineStyle()} />;\n}\n\nexport default CircleIcon;\n","import React from 'react';\nimport CircleIcon from './CircleIcon';\n\nfunction GraphNode(props) {\n  const x = props.x - 50;\n  const y = props.y - 50;\n  /*\n    borderStyle: 'solid',\n    borderRadius: '50%',\n    borderColor: 'yellow',\n    */\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: `${x}px`,\n        top: `${y}px`,\n      }}\n      key={props.index}\n      onClick={props.onClick}>\n        <div style={{textAlign:'center'}}>{props.index}</div>\n      <CircleIcon isNeighbor={props.isNeighbor} isStart={props.isStart} isEnd={props.isEnd} selected={props.selected} />\n    </div>\n  );\n}\n\nexport default GraphNode;\n","import React from 'react';\nimport './animation.css';\n\nfunction Line(props) {\n  const {x1, x2, y1, y2} = props.data;\n  let className;\n  if (props.isShortest) {\n    className = 'path';\n  } else {\n    className = '';\n  }\n  return (\n    <svg\n      style={{\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        width: '100%',\n        height: '100%',\n        zIndex: '-1',\n      }}>\n      <line\n        x1={x1}\n        x2={x2}\n        y1={y1}\n        y2={y2}\n        className={className}\n        style={\n          props.isShortest\n            ? {\n                strokeWidth: '5px',\n                stroke: 'green',\n                animationDelay: `${props.wait}s`,\n              }\n            : {\n                strokeWidth: '2px',\n                stroke: 'black',\n              }\n        }\n      />\n    </svg>\n  );\n}\n\nexport default Line;\n","import React, {useState} from 'react';\nimport {Menu, Icon} from 'antd';\n\nfunction MenuBar(props) {\n  const [current, setCurrent] = useState('mail');\n\n  const handleClick = e => {\n    setCurrent(e.key);\n  };\n\n  const renderData = data => {\n    return data.disabled ? (\n      <Menu.Item disabled key={data.value} onClick={data.onClick}>\n        <Icon type={data.type} />\n        {data.text}\n      </Menu.Item>\n    ) : (\n      <Menu.Item key={data.value} onClick={data.onClick}>\n        <Icon type={data.type} />\n        {data.text}\n      </Menu.Item>\n    );\n  };\n\n  return (\n    <Menu\n      style={{position: 'sticky'}}\n      onClick={handleClick}\n      selectedKeys={[current]}\n      mode=\"horizontal\">\n      {props.data.map(data => renderData(data))}\n    </Menu>\n  );\n}\n\nexport default MenuBar;\n","class Edge {\n  constructor(nodeA, nodeB, weight = 1) {\n    this.nodeA = nodeA;\n    this.nodeB = nodeB;\n    this.weight = weight;\n  }\n\n  containsNode(node) {\n    return this.nodeA=== node|| this.nodeB=== node;\n  }\n}\n\nexport default Edge;\n","//change to payload\n//add RESET OPTION\nexport const reset = () => {\n  return {\n    type: 'RESET',\n  };\n};\n\nexport const addNode = newNode => {\n  return {\n    type: 'ADD_NODE',\n    node: newNode,\n  };\n};\n\nexport const delNode = delNode => {\n  return {\n    type: 'DEL_NODE',\n    node: delNode,\n  };\n};\n\n// edge = Object Edge\nexport const addEdge = newEdge => {\n  return {\n    type: 'ADD_EDGE',\n    edge: newEdge,\n  };\n};\n\nexport const modEdge = edge => {\n  return {\n    type: 'MOD_EDGE',\n    edge,\n  };\n};\n\n// nodePair = [nodeA, nodeB]\nexport const delEdge = nodePair => {\n  return {\n    type: 'DEL_EDGE',\n    nodePair,\n  };\n};\n","import React from 'react';\nimport Edge from '../classes/Edge';\nimport {modEdge} from '../../../redux/graphActions';\nimport {InputNumber} from 'antd';\n\nconst RenderEdge = props => {\n  const [edge, edges, setEdges, dispatch, negWts] = props.value;\n  return (\n    <div>\n      <h3>\n        Edge: ({edge.nodeA.id}, {edge.nodeB.id}), Weight:{' '}\n        <InputNumber\n          min={negWts ? -100 : 0}\n          max={100}\n          value={edge.weight}\n          onChange={e => {\n            const newEdges = [];\n            for (let i = 0; i < edges.length; i++) {\n              const newEdge = new Edge(\n                edges[i].nodeA,\n                edges[i].nodeB,\n                edges[i].weight,\n              );\n              if (\n                newEdge.nodeA === edge.nodeA &&\n                newEdge.nodeB === edge.nodeB\n              ) {\n                // modify this edge's weight\n                newEdge.weight = e;\n                dispatch(modEdge(newEdge));\n              }\n              newEdges.push(newEdge);\n            }\n            setEdges(newEdges);\n          }}\n        />\n      </h3>\n    </div>\n  );\n};\n\nexport default RenderEdge;\n","import React, {useState} from 'react';\nimport {Modal, Button} from 'antd';\n\nconst DijkstraDescription = props => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <span style={{margin: '0 1em'}}>\n      <Button type=\"primary\" onClick={e => setVisible(true)}>\n        Dijkstra Algorithm Description\n      </Button>\n      <Modal\n        title=\"Dijkstra Description\"\n        visible={visible}\n        onOk={e => setVisible(false)}\n        onCancel={e => setVisible(false)}>\n        <p>\n          Dijkstra is a shortest path algorithm that works on graphs with\n          non-negative edge weights\n        </p>\n        <p>\n          The basic idea is that it uses a priorityQueue to keep track of edge\n          weights. At each iteration, extract-min is performed on the\n          priorityQueue.\n        </p>\n        <p>\n          The invariant here is that the edge that was just extracted from the\n          priorityQueue has the shortest path from the source vertex\n        </p>\n        <pre>PseudoCode</pre>\n        <pre>Dijkstra(G, s): </pre>\n        <pre>{'  '}init()</pre>\n        <i>\n          // set all node's delta value to be infinite and source node's delta\n          value as 0\n        </i>\n        <pre>{'  '}PQ.add(s)</pre>\n        <pre>{'  '}while (!PQ.isEmpty()):</pre>\n        <pre>{'    '}v = PQ.extractMin()</pre>\n        <pre>{'    '}for u in v.neighbors:</pre>\n        <pre>{'      '}relax(u, v)</pre>\n        <i>\n          // relaxes delta value of u if delta(v) + w(v,u) is less than\n          delta(u), then add u to PQ\n        </i>\n      </Modal>\n    </span>\n  );\n};\n\nexport default DijkstraDescription;\n","import React, {useState} from 'react';\nimport {Modal, Button} from 'antd';\n\nconst BellmanFordDescription = props => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <span style={{margin: '0 1em'}}>\n      <Button type=\"primary\" onClick={e => setVisible(true)}>\n        Bellman-Ford Algorithm Description\n      </Button>\n      <Modal\n        title=\"Bellman-Ford Description\"\n        visible={visible}\n        onOk={e => setVisible(false)}\n        onCancel={e => setVisible(false)}>\n        <p>\n          Bellman-Ford is a shortest path algorithm that works on directed\n          graphs with negative edge weights without any negative weight cycles\n        </p>\n        <p>\n          It does |V|-1 iterations of |E| relaxations, since at the ith\n          iteration the node at the ith hop will have converged on its delta\n          value.\n        </p>\n        <p>\n          If after |V|-1 iterations, there exists an edge that can be relaxed,\n          it indicates the presence of negative weight cycles.\n        </p>\n        <pre>PseudoCode</pre>\n        <pre>BellmanFord(G, s): </pre>\n        <pre>{'  '}init()</pre>\n        <i>\n          // set all node's delta value to be infinite and source node's delta\n          value as 0\n        </i>\n        <pre>{'  '}for i in 1 ... |V|-1:</pre>\n        <pre>{'    '}for j in 1 ... |E|:</pre>\n        <pre>{'      '}relax(E[j])</pre>\n        <i>\n          // relaxes delta value of u if delta(v) + w(v,u) is less than\n          delta(u), then set u's parent as v\n        </i>\n      </Modal>\n    </span>\n  );\n};\n\nexport default BellmanFordDescription;\n","import React, {useState} from 'react';\nimport {Modal, Button} from 'antd';\n\nconst Legend = props => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <span style={{textAlign: 'center'}}>\n      <Button type=\"primary\" onClick={e => setVisible(true)}>\n        Legend\n      </Button>\n      <Modal\n        title=\"Legend\"\n        visible={visible}\n        onOk={e => setVisible(false)}\n        onCancel={e => setVisible(false)}>\n        <p>\n          Source Node: <font color=\"black\">Black</font>\n        </p>\n        <p>\n          Destination Node: <font color=\"red\">RED</font>\n        </p>\n        <p>\n          Node that was extracted from PQ: <font color=\"green\">GREEN</font>\n        </p>\n        <p>\n          Neighbor node: <font color=\"darkgoldenrod\">YELLOW</font>\n        </p>\n      </Modal>\n    </span>\n  );\n};\n\nexport default Legend;\n","import React, {useState} from 'react';\nimport {Modal, Button} from 'antd';\n\nconst BellmanFordLegend = props => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <span style={{textAlign: 'center'}}>\n      <Button type=\"primary\" onClick={e => setVisible(true)}>\n        Legend\n      </Button>\n      <Modal\n        title=\"Legend\"\n        visible={visible}\n        onOk={e => setVisible(false)}\n        onCancel={e => setVisible(false)}>\n        <p>\n          Source Node: <font color=\"black\">Black</font>\n        </p>\n        <p>\n          Destination Node: <font color=\"red\">RED</font>\n        </p>\n        <p>\n          Node u of edge (u,v): <font color=\"green\">GREEN</font>\n        </p>\n        <p>\n          Node v of edge (u,v): <font color=\"darkgoldenrod\">YELLOW</font>\n        </p>\n      </Modal>\n    </span>\n  );\n};\n\nexport default BellmanFordLegend;\n","export const NODE = 'NODE';\nexport const EDGE = 'EDGE';\nexport const ADD = 'ADD';\nexport const DEL = 'DEL';\nexport const RUN = 'RUN';\nexport const ADDNODEINFO = 'Click anywhere on the area highlighted below to add new Nodes.';\nexport const DELNODEINFO = 'Click anywhere on the area highlighted below to delete new Nodes.';\nexport const ADDEDGEINFO = 'To add an Edge, click on the first Node of the new Edge, then click on the second Node. Do this for every edge.'; \nexport const DELEDGEINFO = 'To delete an Edge, click on the first Node of the Edge to be deleted, then click on the second Node.'; \nexport const RUNINFO = 'To run dijkstra, first select source and destination Node by clicking on the respective Nodes. Then, click on the [Run {graphAlgo}!] Button. To re-run dijkstra, click on [Run {graphAlgo}!] button again!';\n","class Node {\n  constructor(x, y, id, costToReach = Number.MAX_SAFE_INTEGER, parent = null) {\n    this.x = x;\n    this.y = y;\n    this.id = id;\n    this.costToReach = costToReach;\n    this.parent = parent;\n  }\n}\n\nexport default Node;\n","import {\n  NODE,\n  EDGE,\n  ADD,\n  DEL,\n  RUN,\n  ADDNODEINFO,\n  DELNODEINFO,\n  ADDEDGEINFO,\n  DELEDGEINFO,\n  RUNINFO,\n} from './constants';\nimport {message} from 'antd';\nimport Node from '../classes/Node';\nimport Edge from '../classes/Edge';\nimport {\n  reset,\n  addNode,\n  delNode,\n  addEdge,\n  delEdge,\n} from '../../../redux/graphActions';\n\nexport const onClickReset = (\n  setNodes,\n  setEdges,\n  setCurrState,\n  setLatestNodeId,\n  setStartEndNodePair,\n  setInfoText,\n  setCurrentNode,\n  setNeighborNode,\n  setShortestPath,\n  dispatch,\n) => {\n  setNodes([]);\n  setEdges([]);\n  setCurrState({\n    element: NODE,\n    operation: ADD,\n  });\n  setLatestNodeId(0);\n  setStartEndNodePair([null, null]);\n  setInfoText(ADDNODEINFO);\n  setCurrentNode(null);\n  setNeighborNode(null);\n  setShortestPath([]);\n  dispatch(reset());\n};\n\nexport const onClickAddNodeButton = (setCurrState, setInfoText) => {\n  setCurrState({\n    element: NODE,\n    operation: ADD,\n  });\n  setInfoText(ADDNODEINFO);\n};\n\nexport const onClickDelNodeButton = (setCurrState, setInfoText) => {\n  setCurrState({\n    element: NODE,\n    operation: DEL,\n  });\n  setInfoText(DELNODEINFO);\n};\n\nexport const onClickAddEdgeButton = (setCurrState, setInfoText) => {\n  setCurrState({\n    element: EDGE,\n    operation: ADD,\n    nodeA: null,\n  });\n  setInfoText(ADDEDGEINFO);\n};\n\nexport const onClickDelEdgeButton = (setCurrState, setInfoText) => {\n  setCurrState({\n    element: EDGE,\n    operation: DEL,\n    nodeA: null,\n  });\n  setInfoText(DELEDGEINFO);\n};\n\nexport const onClickRunButton = (\n  setCurrState,\n  setStartEndNodePair,\n  setInfoText,\n  setShortestPath,\n  setCurrentNode,\n  setNeighborNode,\n) => {\n  setCurrState({\n    element: null,\n    operation: RUN,\n    nodeA: null,\n  });\n  setStartEndNodePair([null, null]);\n  setInfoText(RUNINFO);\n  setShortestPath([]);\n  setCurrentNode(null);\n  setNeighborNode(null);\n};\n\nexport const handleAddNode = (\n  e,\n  nodes,\n  latestNodeId,\n  setLatestNodeId,\n  setNodes,\n  dispatch,\n) => {\n  if (e.target.value) {\n    return;\n  }\n  // IMMUTABILITY\n  const temp = [];\n  for (let i = 0; i < nodes.length; i++) {\n    if (\n      Math.abs(nodes[i].x - e.clientX) < 80 && // very hacky hardcoding\n      Math.abs(nodes[i].y - e.clientY) < 50\n    ) {\n      message.error('Ensure that there is enough space between the nodes');\n      return;\n    }\n    temp.push(nodes[i]);\n  }\n  const newNode = new Node(e.clientX, e.clientY, latestNodeId);\n  setLatestNodeId(latestNodeId + 1);\n  temp.push(newNode);\n  setNodes(temp);\n  dispatch(addNode(newNode));\n  return newNode;\n};\n\nexport const onClickDelNode = (\n  nodes,\n  setNodes,\n  node,\n  edges,\n  setEdges,\n  dispatch,\n) => {\n  const tempNodes = [];\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i] !== node) {\n      tempNodes.push(nodes[i]);\n    }\n  }\n  const tempEdges = [];\n  for (let i = 0; i < edges.length; i++) {\n    if (edges[i].nodeA === node || edges[i].nodeB === node) {\n      continue;\n    } else {\n      tempEdges.push(edges[i]);\n    }\n  }\n  setNodes(tempNodes);\n  setEdges(tempEdges);\n  dispatch(delNode(node));\n};\n\nconst resetSelectedNode = (currState, setCurrState) => {\n  setCurrState({\n    element: currState.element,\n    operation: currState.operation,\n    nodeA: null,\n  });\n};\n\n// select nodeA for ADD/DEL EDGE\nexport const onClickSelectNode = (\n  node,\n  currState,\n  setCurrState,\n  edges,\n  setEdges,\n  dispatch,\n) => {\n  if (currState.nodeA) {\n    //add or del edge from nodeA to node\n    const temp = [];\n    if (currState.operation === ADD) {\n      for (let i = 0; i < edges.length; i++) {\n        if (\n          (edges[i].nodeA === currState.nodeA && edges[i].nodeB === node) ||\n          (edges[i].nodeA === node && edges[i].nodeB === currState.nodeA)\n        ) {\n          //means edge already exists (duplicate)\n          resetSelectedNode(currState, setCurrState);\n          return message.error('Edge already exists!');\n        }\n        temp.push(edges[i]);\n      }\n      const newEdge = new Edge(currState.nodeA, node);\n      //const newEdge = [currState.nodeA, node];\n      temp.push(newEdge);\n      dispatch(addEdge(newEdge));\n      resetSelectedNode(currState, setCurrState);\n    } else {\n      const nodePair = [currState.nodeA, node];\n      for (let i = 0; i < edges.length; i++) {\n        if (\n          edges[i].containsNode(nodePair[0]) &&\n          edges[i].containsNode(nodePair[1])\n        ) {\n          continue;\n        } else {\n          temp.push(edges[i]);\n        }\n      }\n      dispatch(delEdge(nodePair));\n    }\n    setEdges(temp);\n    resetSelectedNode(currState, setCurrState);\n  } else {\n    //set nodeA to node\n    setCurrState({\n      element: currState.element,\n      operation: currState.operation,\n      nodeA: node,\n    });\n    //message.info('Please select the second node');\n  }\n};\n","const dijkstra = async (\n  nodes,\n  startEndNodePair,\n  setShortestPath,\n  setCurrentNode,\n  setNeighborNode,\n  readOnlyState,\n  helperDelay,\n) => {\n  const helperSort = () => {\n    // 'PRIORITY QUEUE'\n    nodesQueue.sort((nodeA, nodeB) => {\n      if (nodeA.costToReach > nodeB.costToReach) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n  };\n\n  // Make copy of all nodes, set source node cost as 0, rest of node\n  // by default has cost of infinity\n  const nodesMap = [];\n  const nodesQueue = [];\n  const isVisited = [];\n  for (let i = 0; i < nodes.length; i++) {\n    const newNode = Object.assign({}, nodes[i]);\n    if (startEndNodePair[0] === nodes[i]) {\n      newNode.costToReach = 0; // other nodes are set to costToReach = MAXSAFEINTEGER by default\n    }\n    nodesQueue.push(newNode);\n    nodesMap.push(newNode);\n  }\n\n  const dest = startEndNodePair[1];\n  while (nodesQueue.length > 0) {\n    helperSort();\n    const nextNode = nodesQueue.shift();\n    await helperDelay(500);\n    if (nextNode.id === dest.id) {\n      // construct shortest path\n      let pair;\n      const path = [];\n      let currentNode = nextNode;\n      while (true) {\n        if (currentNode.parent === null) {\n          //means source node already\n          break;\n        }\n        let parentNode = currentNode.parent;\n        pair = [parentNode, currentNode];\n        path.push(pair);\n        currentNode = parentNode;\n      }\n      setShortestPath(path);\n      setCurrentNode(null);\n      setNeighborNode(null);\n      break;\n    } else {\n      isVisited.push(nextNode.id);\n    }\n\n    //mark nextNode as current node (styling purposes)\n    for (let i = 0; i < nodes.length; i++) {\n      if (nodes[i].id === nextNode.id) {\n        setCurrentNode(nodes[i]);\n        setNeighborNode(null);\n        break;\n      }\n    }\n\n    // get neighbors from Redux store\n    const nextNodeNeighbors = readOnlyState[nextNode.id];\n    for (let i = 0; i < nextNodeNeighbors.length; i++) {\n      await helperDelay(500);\n      let curr;\n      const neighborId = nextNodeNeighbors[i].other;\n\n      // mark neighborNode\n      for (let j = 0; j < nodes.length; j++) {\n        if (nodes[j].id === neighborId) {\n          setNeighborNode(nodes[j]);\n          break;\n        }\n      }\n\n      // find the actual Node object in nodesMap\n      for (let j = 0; j < nodesMap.length; j++) {\n        if (nodesMap[j].id === neighborId) {\n          curr = nodesMap[j];\n          break;\n        }\n      }\n\n      //relaxx\n      if (isVisited.includes(curr.id)) {\n        continue;\n      } else {\n        const tempCostToReach =\n          nextNodeNeighbors[i].weight + nextNode.costToReach;\n        if (tempCostToReach < curr.costToReach) {\n          curr.costToReach = tempCostToReach;\n          curr.parent = nextNode;\n        }\n      }\n    }\n  }\n};\n\nexport default dijkstra;\n","import Edge from '../classes/Edge';\n\n// bellman ford cannot work on undirected graphs w neg weights!!!\nconst bellmanFord = async (\n  nodes,\n  startEndNodePair,\n  setShortestPath,\n  setCurrentNode,\n  setNeighborNode,\n  readOnlyState,\n  helperDelay,\n  message,\n) => {\n  // Make copy of all nodes, set source node cost as 0, rest of node\n  // by default has cost of infinity\n  const nodesMap = [];\n  for (let i = 0; i < nodes.length; i++) {\n    const newNode = Object.assign({}, nodes[i]);\n\n    if (startEndNodePair[0] === nodes[i]) {\n      newNode.costToReach = 0;\n    }\n    nodesMap.push(newNode);\n  }\n\n  const edgesMap = [];\n  for (let i = 0; i < nodesMap.length; i++) {\n    const neighborsArr = readOnlyState[nodesMap[i].id];\n    for (let j = 0; j < neighborsArr.length; j++) {\n      const neighborId = neighborsArr[j].other;\n      const neighborNode = nodesMap.find(node => node.id === neighborId);\n      const wt = neighborsArr[j].weight;\n      const edge = new Edge(nodesMap[i], neighborNode, wt);\n      edgesMap.push(edge);\n    }\n  }\n\n  const dest = startEndNodePair[1];\n  // do |V| - 1 steps of |E| relaxations\n  for (let i = 0; i < nodesMap.length - 1; i++) {\n    let didRelax = false;\n    for (let j = 0; j < edgesMap.length; j++) {\n      // relax edge[j]\n      await helperDelay(250);\n      const edge = edgesMap[j];\n      const u = edge.nodeA;\n      const v = edge.nodeB;\n      // mark u and v\n      setCurrentNode(nodes.find(node => node.id === u.id));\n      setNeighborNode(nodes.find(node => node.id === v.id));\n      const wt = edge.weight;\n      const d = u.costToReach + wt;\n      if (d < v.costToReach) {\n        v.costToReach = d;\n        v.parent = u;\n        didRelax = true;\n      }\n    }\n    if (!didRelax) {\n      break;\n    }\n  }\n\n  setCurrentNode(null);\n  setNeighborNode(null);\n\n  for (let i = 0; i < edgesMap.length; i++) {\n    // relax edge[j]\n    const edge = edgesMap[i];\n    const u = edge.nodeA;\n    const v = edge.nodeB;\n    const wt = edge.weight;\n    const d = u.costToReach + wt;\n    if (d < v.costToReach) {\n      // means can still relax --> neg wt cycles detected!!\n      message.error('Negative wt cycles detected!');\n      return;\n    }\n  }\n\n  // construct shortest path\n  let pair;\n  const path = [];\n  let currentNode = nodesMap.find(node => node.id === dest.id);\n  while (true) {\n    if (currentNode.parent === null) {\n      //means source node already\n      break;\n    }\n    let parentNode = currentNode.parent;\n    pair = [parentNode, currentNode];\n    path.push(pair);\n    currentNode = parentNode;\n  }\n\n  setShortestPath(path);\n\n  /*\n  console.log(\n    `cost from src to dst: ${\n      nodesMap.find(node => node.id === dest.id).costToReach\n    }`,\n  );\n  */\n};\n\nexport default bellmanFord;\n","import React, {useState} from 'react';\nimport GraphNode from './components/GraphNode';\nimport Line from './components/Line';\nimport MenuBar from './components/MenuBar';\nimport RenderEdge from './components/RenderEdge';\nimport {Alert, message, Button, Modal, Select} from 'antd';\nimport DijkstraDescription from './components/DijkstraDescription';\nimport BellmanFordDescription from './components/BellmanFordDescription';\nimport DijkstraLegend from './components/DijkstraLegend';\nimport BellmanFordLegend from './components/BellmanFordLegend';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {NODE, EDGE, ADD, DEL, RUN, ADDNODEINFO} from './helpers/constants';\nimport {\n  onClickReset,\n  onClickAddNodeButton,\n  onClickDelNodeButton,\n  onClickDelNode,\n  onClickAddEdgeButton,\n  onClickDelEdgeButton,\n  onClickRunButton,\n  onClickSelectNode,\n  handleAddNode,\n} from './helpers/clickHandlers';\nimport dijkstra from './helpers/dijkstra';\nimport bellmanFord from './helpers/bellmanFord';\nimport './GraphsPage.css';\n\nconst {Option} = Select;\n\nfunction GraphsPage(props) {\n  const [nodes, setNodes] = useState([]); // array of nodes\n  const [edges, setEdges] = useState([]); // array of edges\n  const [currState, setCurrState] = useState({\n    element: NODE,\n    operation: ADD,\n    nodeA: null, // to \"highlight\" first node when drawing edges\n  });\n  const [startEndNodePair, setStartEndNodePair] = useState([null, null]); // source and destination vertex\n  const [currentNode, setCurrentNode] = useState(null); //for dijkstra to indicate the node taken out from prio queue\n  const [neighborNode, setNeighborNode] = useState(null); // for dijkstra to \"highlight\" neighbor nodes of the currentNode\n  const [shortestPath, setShortestPath] = useState([]); // array of edges in the shortest path from src to dest\n  const [latestNodeId, setLatestNodeId] = useState(0); // keep track of node IDs\n  const [infoText, setInfoText] = useState(ADDNODEINFO); // the info text below menu bar\n  const [modifyEdge, setModifyEdge] = useState(false); // sets whether the modify edge modal visibility is on/off\n  const [graphAlgo, setGraphAlgo] = useState('Dijkstra'); // sets the graph algo to visualize\n  const dispatch = useDispatch(); // connect to redux store, update it whenever add/delete node/edge\n  const readOnlyState = useSelector(state => state.graph); // read the state of the graph from redux store\n\n  const verifyStartEndNodes = node => {\n    // verify that both src and dest are selected before we run the shortest path algo\n    if (startEndNodePair[0] === null) {\n      setStartEndNodePair([node, startEndNodePair[1]]);\n    } else if (startEndNodePair[1] === null) {\n      setStartEndNodePair([startEndNodePair[0], node]);\n    } else {\n      message.error('Already selected both start and end Nodes!');\n    }\n  };\n\n  const helperDelay = ms => new Promise(res => setTimeout(res, ms)); // hackish delay function to show the visualization\n\n  const menuData = [\n    {\n      value: 'reset',\n      onClick: e =>\n        onClickReset(\n          setNodes,\n          setEdges,\n          setCurrState,\n          setLatestNodeId,\n          setStartEndNodePair,\n          setInfoText,\n          setCurrentNode,\n          setNeighborNode,\n          setShortestPath,\n          dispatch,\n        ),\n      text: 'Reset',\n      type: 'redo',\n    },\n    {\n      value: 'addNode',\n      onClick: e => onClickAddNodeButton(setCurrState, setInfoText),\n      text: 'Add Node',\n      type: 'plus-circle',\n    },\n    {\n      value: 'delNode',\n      onClick: e => onClickDelNodeButton(setCurrState, setInfoText),\n      text: 'Delete Node',\n      type: 'minus-circle',\n    },\n\n    {\n      value: 'addEdge',\n      onClick: e => onClickAddEdgeButton(setCurrState, setInfoText),\n      text: 'Add Edge',\n      type: 'plus',\n    },\n\n    {\n      value: 'delEdge',\n      onClick: e => onClickDelEdgeButton(setCurrState, setInfoText),\n      text: 'Delete Edge',\n      type: 'minus',\n    },\n\n    {\n      value: 'run',\n      onClick: e =>\n        onClickRunButton(\n          setCurrState,\n          setStartEndNodePair,\n          setInfoText,\n          setShortestPath,\n          setCurrentNode,\n          setNeighborNode,\n        ),\n      text: 'Run',\n      type: 'play-circle',\n    },\n  ];\n\n  return (\n    <div className=\"Custom-Parent\">\n      <MenuBar className=\"Custom-MenuBar\" data={menuData} />\n      <Alert showIcon message={infoText} type=\"info\" className=\"Custom-Alert\" />\n      <div className=\"Custom-Block\">\n        <h2>\n          Choose Graph Algorithm:{' '}\n          <Select\n            value={graphAlgo}\n            onChange={e => {\n              onClickReset(\n                setNodes,\n                setEdges,\n                setCurrState,\n                setLatestNodeId,\n                setStartEndNodePair,\n                setInfoText,\n                setCurrentNode,\n                setNeighborNode,\n                setShortestPath,\n                dispatch,\n              );\n              setGraphAlgo(e);\n            }}>\n            <Option value=\"Dijkstra\">Dijkstra</Option>\n            <Option value=\"Bellman-Ford\">Bellman-Ford</Option>\n          </Select>\n        </h2>\n        {currState.operation === RUN &&\n        startEndNodePair[0] &&\n        startEndNodePair[1] ? (\n          <Button\n            type=\"primary\"\n            icon=\"code\"\n            className=\"Custom-Button\"\n            onClick={e => {\n              switch (graphAlgo) {\n                case 'Dijkstra':\n                  return dijkstra(\n                    nodes,\n                    startEndNodePair,\n                    setShortestPath,\n                    setCurrentNode,\n                    setNeighborNode,\n                    readOnlyState,\n                    helperDelay,\n                  );\n                case 'Bellman-Ford':\n                  return bellmanFord(\n                    nodes,\n                    startEndNodePair,\n                    setShortestPath,\n                    setCurrentNode,\n                    setNeighborNode,\n                    readOnlyState,\n                    helperDelay,\n                    message,\n                  );\n                default:\n                  return;\n              }\n            }}>\n            Run {graphAlgo}!\n          </Button>\n        ) : (\n          <Button type=\"primary\" icon=\"code\" className=\"Custom-Button\" disabled>\n            Run {graphAlgo}!\n          </Button>\n        )}\n        <Button\n          type=\"primary\"\n          style={{\n            margin: '0 1em',\n            background: 'darkviolet',\n            borderColor: 'indigo',\n          }}\n          onClick={e => setModifyEdge(true)}>\n          Modify Edge Weights\n        </Button>\n        <Modal\n          title=\"Modify Edge Weights\"\n          visible={modifyEdge}\n          onOk={e => setModifyEdge(false)}\n          onCancel={e => setModifyEdge(false)}>\n          {edges.map(edge => {\n            return (\n              <RenderEdge value={[edge, edges, setEdges, dispatch, false]} />\n            );\n          })}\n        </Modal>\n      </div>\n      <div\n        onClick={e => {\n          if (currState.element === NODE && currState.operation === ADD) {\n            handleAddNode(\n              e,\n              nodes,\n              latestNodeId,\n              setLatestNodeId,\n              setNodes,\n              dispatch,\n            );\n          }\n        }}\n        className=\"Window\">\n        {nodes.length > 0 ? (\n          nodes.map(node => (\n            <GraphNode\n              onClick={e => {\n                if (currState.element === NODE && currState.operation === DEL) {\n                  return onClickDelNode(\n                    nodes,\n                    setNodes,\n                    node,\n                    edges,\n                    setEdges,\n                    dispatch,\n                  );\n                } else if (currState.element === EDGE) {\n                  return onClickSelectNode(\n                    node,\n                    currState,\n                    setCurrState,\n                    edges,\n                    setEdges,\n                    dispatch,\n                  );\n                } else if (currState.operation === RUN) {\n                  verifyStartEndNodes(node);\n                }\n              }}\n              index={node.id}\n              selected={currState.nodeA === node || currentNode === node}\n              isNeighbor={neighborNode === node}\n              isStart={startEndNodePair[0] === node}\n              isEnd={startEndNodePair[1] === node}\n              x={node.x}\n              y={node.y}\n            />\n          ))\n        ) : (\n          <div />\n        )}\n        {edges.length > 0 ? (\n          edges.map(edge => {\n            const data = {\n              x1: edge.nodeA.x,\n              y1: edge.nodeA.y,\n              x2: edge.nodeB.x,\n              y2: edge.nodeB.y,\n            };\n            return <Line isShortest={false} data={data} />;\n          })\n        ) : (\n          <div />\n        )}\n        {shortestPath.map((pair, index) => {\n          const parent = pair[0];\n          const child = pair[1];\n          const data = {\n            x1: child.x,\n            y1: child.y,\n            x2: parent.x,\n            y2: parent.y,\n          };\n          // edge is shortest path\n          return <Line wait={index * 1.5} isShortest={true} data={data} />;\n        })}\n      </div>\n      <br />\n      <div style={{textAlign: 'center'}}>\n        {graphAlgo === 'Dijkstra' ? (\n          <div>\n            <DijkstraDescription />\n            <DijkstraLegend />\n          </div>\n        ) : (\n          <div>\n            <BellmanFordDescription />\n            <BellmanFordLegend />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default GraphsPage;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {Row, Col, Carousel} from 'antd';\nimport MenuBar from './graphs/components/MenuBar';\nimport './HomePage.css';\n\nfunction HomePage(props) {\n  const data = [\n    {\n      value: 'graphs',\n      onClick: e => props.history.push('/graphs'),\n      type: 'radar-chart',\n      text: 'Graph Algorithms',\n    },\n    {\n      value: 'searching',\n      onClick: e => props.history.push('/search'),\n      type: 'file-search',\n      text: 'Searching Algorithms',\n    },\n    {\n      value: 'sorting',\n      onClick: e => props.history.push('/sort'),\n      type: 'sort-ascending',\n      text: 'Sorting Algorithms',\n    },\n    {\n      value: 'dataStructures',\n      onClick: e => props.history.push('/ds'),\n      type: 'database',\n      text: 'Data Structures',\n    },\n  ];\n\n  return (\n    <div>\n      <MenuBar data={data} />\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          height: '40em',\n          justifyContent: 'space-evenly',\n        }}>\n        <Row type=\"flex\" align=\"middle\" style={{textAlign: 'center'}}>\n          <Col span={12}>\n            <Carousel autoplay style={{margin: '0 2.5em'}}>\n              <Link to=\"/graphs\">\n                <div className=\"display graph\">\n                  <h1\n                    style={{\n                      fontSize: '3em',\n                      opacity: '1.0',\n                      fontWeight: 'bold',\n                    }}>\n                    Graph Algorithms Visualizer\n                  </h1>\n                </div>\n              </Link>\n              <Link to=\"/search\">\n                <div className=\"display search\">\n                  <h1\n                    style={{\n                      background: 'rgba(115, 111, 104, 0.1)',\n                      fontSize: '3em',\n                      opacity: '1.0',\n                      fontWeight: 'bold',\n                    }}>\n                    Search Algorithms Visualizer\n                  </h1>\n                </div>\n              </Link>\n              <Link to=\"/sort\">\n                <div className=\"display sort\">\n                  <h1\n                    style={{\n                      background: 'rgba(115, 111, 104, 0.1)',\n                      fontSize: '3em',\n                      opacity: '1.0',\n                      fontWeight: 'bold',\n                    }}>\n                    Sort Algorithms Visualizer\n                  </h1>\n                </div>\n              </Link>\n              <Link to=\"/ds\">\n                <div className=\"display dataStructures\">\n                  <h1\n                    style={{\n                      background: 'rgba(115, 111, 104, 0.1)',\n                      fontSize: '3em',\n                      opacity: '1.0',\n                      fontWeight: 'bold',\n                    }}>\n                    Data Structures Visualizer\n                  </h1>\n                </div>\n              </Link>\n            </Carousel>\n          </Col>\n          <Col span={12} style={{alignSelf: 'flex-start'}}>\n            <h1>Welcome to Algorithms Visualizer!</h1>\n            <h2>\n              This is where I showcase the different algorithms taught in\n              DSA.\n            </h2>\n            <h2>\n              Implemented Algorithms & Data-Structures:\n              <li>Dijkstra</li>\n              <li>Bellman-Ford</li>\n              <li>Binary Search</li>\n              <li>Insertion Sort</li>\n              <li>Bubble Sort</li>\n              <li>Selection Sort</li>\n              <li>Merge Sort</li>\n              <li>Binary Search Tree</li>\n              <li>AVL Tree</li>\n            </h2>\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport './BarSearch.css';\n\nfunction BarSearch(props) {\n  const left = `${props.left}%`;\n  const height = `${props.height}%`;\n  const width = `${props.width}%`;\n\n  let className = 'BarColorSearch';\n  if (props.mid) {\n    className = className + ' mid';\n  } else if (props.outOfRange) {\n    className = className + ' outOfRange';\n  }\n\n  return (\n    <div className=\"BarSearch\" style={{left: left, width: width}}>\n      <div className={className} style={{height: height}} />\n    </div>\n  );\n}\n\nexport default BarSearch;\n","import React, {useState} from 'react';\nimport {Modal, Button} from 'antd';\n\nconst BinSearchDescription = props => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <span style={{textAlign: 'center'}}>\n      <Button type=\"primary\" onClick={e => setVisible(true)}>\n        Binary Search Description\n      </Button>\n      <Modal\n        title=\"Binary Search Description\"\n        visible={visible}\n        onOk={e => setVisible(false)}\n        onCancel={e => setVisible(false)}>\n        <p>\n          Binary search is a very useful searching algorithm on special types of\n          arrays\n        </p>\n        <p>\n          Either the array has to be monotonically sorted, or a function that is\n          monotonically increasing / decreasing when used on the array\n        </p>\n        <pre>PseudoCode</pre>\n        <pre>BinSearch(arr, low, high, func)</pre>\n        <pre> if (low > high) return</pre>\n        <pre> if (low == high) return arr[low]</pre>\n        <pre> mid = low + (high - low) / 2</pre>\n        <pre> if (func(arr[mid])) recurse (left OR right)</pre>\n        <pre> else recurse (right OR left)</pre>\n        <p>\n          <i>If recurse left, set low = low and high = mid</i>\n        </p>\n        <p>\n          <i>If recurse right, set low = mid and high = high</i>\n        </p>\n      </Modal>\n    </span>\n  );\n};\n\nexport default BinSearchDescription;\n","import React, {useState} from 'react';\nimport {Modal, Button} from 'antd';\n\nconst Legend = props => {\n  const [visible, setVisible] = useState(false);\n  return (\n      <span style={{textAlign: 'center', margin: '0 1em'}}>\n      <Button type=\"primary\" onClick={e => setVisible(true)}>\n        Legend\n      </Button>\n      <Modal\n        title=\"Legend\"\n        visible={visible}\n        onOk={e => setVisible(false)}\n        onCancel={e => setVisible(false)}>\n        <p>\n          Bars that are in the search range: <font color=\"blue\">BLUE</font>\n        </p>\n        <p>\n          Bars that are not in the search range: <font color=\"grey\">GREY</font>\n        </p>\n        <p>\n          Bar at current mid position: <font color=\"green\">GREEN</font>\n        </p>\n      </Modal>\n    </span>\n  );\n};\n\nexport default Legend;\n","import React, {useState} from 'react';\nimport {Slider, Button, InputNumber} from 'antd';\nimport BarSearch from './BarSearch';\nimport BinSearchDescription from '../components/BinSearchDescription';\nimport Legend from '../components/Legend';\nimport './SearchArray.css';\n\nfunction SearchArray(props) {\n  // 0% - (100% - WIDTH%) width to divide bars\n  // default width of 1 bar is 1.5%\n  // height 0 - 65%\n\n  const [searchVal, setSearchVal] = useState(5);\n  const initialRange = [];\n  for (let i = 0; i < 10; i++) {\n    initialRange.push({\n      val: i + 1,\n      isMid: false,\n      isOutOfRange: false,\n    });\n  }\n  const [range, setRange] = useState(initialRange);\n  const helperDelay = ms => new Promise(res => setTimeout(res, ms));\n\n  const reset = () => {\n    setSearchVal(5);\n    setRange(initialRange);\n  };\n\n  const renderBar = bar => {\n    const numTotalBars = range.length;\n\n    let width;\n    if (numTotalBars <= 20) {\n      width = 1.5;\n    } else if (numTotalBars <= 40) {\n      width = 1.25;\n    } else if (numTotalBars <= 60) {\n      width = 1;\n    } else if (numTotalBars <= 80) {\n      width = 0.75;\n    } else {\n      width = 0.5;\n    }\n\n    const tolWidth = 100 - width;\n    const leftInterval = tolWidth / (numTotalBars - 1);\n    const heightInterval = 100 / numTotalBars;\n\n    const left = (bar.val - 1) * leftInterval;\n    const height = bar.val * heightInterval;\n\n    return (\n      <BarSearch\n        outOfRange={bar.isOutOfRange}\n        mid={bar.isMid}\n        left={left}\n        height={height}\n        width={width}\n      />\n    );\n  };\n\n  const binarySearch = async num => {\n    console.log(range);\n    let low = 1;\n    let high = range.length;\n    while (low <= high) {\n      console.log(`low: ${low} high: ${high}`);\n      let mid = Math.floor((low + high) / 2);\n      const temp = [];\n      for (let i = 0; i < range.length; i++) {\n        if (i + 1 === mid) {\n          temp.push({\n            val: i + 1,\n            isMid: true,\n            isOutOfRange: false,\n          });\n        } else if (i + 1 < low || i + 1 > high) {\n          temp.push({\n            val: i + 1,\n            isMid: false,\n            isOutOfRange: true,\n          });\n        } else {\n          temp.push({\n            val: i + 1,\n            isMid: false,\n            isOutOfRange: false,\n          });\n        }\n      }\n      setRange(temp);\n      if (mid === num) {\n        console.log(`Found ${num}!`);\n        break;\n      } else if (mid > num) {\n        // recurse on left\n        high = mid - 1;\n      } else {\n        // mid < num\n        // recurse on right\n        low = mid + 1;\n      }\n      await helperDelay(1500);\n    }\n  };\n\n  return (\n    <div style={{textAlign: 'center', height: '100%'}}>\n      <h2>\n        Adjust total number of bars:\n        <Slider\n          onChange={e => {\n            let temp = [];\n            for (let i = 0; i < e; i++) {\n              temp.push({\n                val: i + 1,\n                isMid: false,\n                isOutOfRange: false,\n              });\n            }\n            setRange(temp);\n          }}\n          value={range.length}\n          min={2}\n          max={100}\n        />\n        Search Number from 1 to {range.length}:{' '}\n        <InputNumber\n          onChange={e => setSearchVal(e)}\n          size=\"large\"\n          min={1}\n          max={range.length}\n          value={searchVal}\n        />\n      </h2>\n      <Button\n        onClick={e => binarySearch(searchVal)}\n        type=\"primary\"\n        icon=\"search\"\n        style={{marginBottom: '1em', marginRight: '1em'}}>\n        Search!\n      </Button>\n      <Button type=\"primary\" icon=\"redo\" onClick={e => reset()}>\n        Reset\n      </Button>\n      <div className=\"SearchArray\">{range.map(bar => renderBar(bar))}</div>\n      <br />\n      <BinSearchDescription />\n      <Legend />\n    </div>\n  );\n}\n\nexport default SearchArray;\n","import React from 'react';\nimport SearchArray from './components/SearchArray';\nimport './style.css';\n\nfunction SearchPage(props) {\n  return (\n    <div className=\"wrapper\">\n      <h1\n        style={{\n          textAlign: 'center',\n          fontWeight: 'bold',\n          textDecoration: 'underline',\n        }}>\n        Visualize Binary Search!\n      </h1>\n      <SearchArray />\n    </div>\n  );\n}\n\nexport default SearchPage;\n","import React from 'react';\nimport './BarSort.css';\n\nfunction BarSort(props) {\n  const left = `${props.left}%`;\n  const height = `${props.height}%`;\n  const width = `${props.width}%`;\n\n  let className = 'BarColorSort';\n  if (props.isSorted) {\n    className = className + ' sorted';\n  } else if (props.isMin) {\n    className = className + ' currMin';\n  } else if (props.underConsideration) {\n    className = className + ' underConsideration';\n  }\n\n  return (\n    <div className=\"BarSort\" style={{left: left, width: width}}>\n      <div className={className} style={{height: height}} />\n    </div>\n  );\n}\n\nexport default BarSort;\n","import React, {useState} from 'react';\nimport {Modal, Button} from 'antd';\n\nconst Legend = props => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <span style={{textAlign: 'center', margin: '0 1em'}}>\n      <Button type=\"primary\" onClick={e => setVisible(true)}>\n        Legend\n      </Button>\n      <Modal\n        title=\"Legend\"\n        visible={visible}\n        onOk={e => setVisible(false)}\n        onCancel={e => setVisible(false)}>\n        <p>\n          Bars that are sorted: <font color=\"green\">GREEN</font>\n        </p>\n        <p>\n          Bars that are not sorted: <font color=\"blue\">BLUE</font>\n        </p>\n        <p>\n          Bars at low and high position of the interval (during merge sort):{' '}\n          <font color=\"orange\">ORANGE</font>\n        </p>\n      </Modal>\n    </span>\n  );\n};\n\nexport default Legend;\n","// generate random permutation of the barArr\nconst knuthShuffle = barArr => {\n  for (let i = 1; i < barArr.length; i++) {\n    // range: 0 ... i (inclusive)\n    const range = i + 1;\n    const r = Math.floor(Math.random() * range);\n    // swap barArr[i] and barArr[r]\n    const temp = barArr[i];\n    barArr[i] = barArr[r];\n    barArr[r] = temp;\n  }\n};\n\nexport default knuthShuffle;\n","const insertionSort = async (range, setRange, helperDelay) => {\n  let sortedArr = [];\n  for (let i = 0; i < range.length; i++) {\n    if (i === 0) {\n      sortedArr.push({\n        val: range[i].val,\n        isSorted: true,\n      });\n    } else {\n      sortedArr.push(range[i]);\n    }\n  }\n\n  for (let i = 1; i < sortedArr.length; i++) {\n    await helperDelay(50);\n\n    const key = sortedArr[i].val;\n    for (let j = i - 1; j >= -1; j--) {\n      const sortedTempArr = [];\n      for (let k = 0; k < sortedArr.length; k++) {\n        sortedTempArr.push(sortedArr[k]);\n      }\n\n      if (j === -1 || sortedTempArr[j].val <= key) {\n        sortedTempArr[i].isSorted = true;\n        sortedTempArr[j + 1].isSorted = true;\n        setRange(sortedTempArr);\n        sortedArr = sortedTempArr;\n        await helperDelay(50);\n        break;\n      } else {\n        const temp = sortedTempArr[j + 1];\n        sortedTempArr[j + 1] = sortedTempArr[j];\n        sortedTempArr[j] = temp;\n        setRange(sortedTempArr);\n        sortedArr = sortedTempArr;\n        await helperDelay(50);\n      }\n    }\n  }\n\n  console.log(sortedArr);\n};\nexport default insertionSort;\n","const bubbleSort = async (range, setRange, helperDelay) => {\n  let sortedArr = [];\n  for (let i = 0; i < range.length; i++) {\n    sortedArr.push(range[i]);\n  }\n\n  for (let i = 0; i < sortedArr.length; i++) {\n    await helperDelay(50);\n\n    for (let j = 0; j < sortedArr.length; j++) {\n      const sortedTempArr = [];\n      for (let k = 0; k < sortedArr.length; k++) {\n        sortedTempArr.push(sortedArr[k]);\n      }\n\n      if (j === sortedArr.length - 1) {\n        sortedTempArr[sortedArr.length - i - 1].isSorted = true;\n        setRange(sortedTempArr);\n        sortedArr = sortedTempArr;\n        await helperDelay(50);\n      } else if (sortedTempArr[j].val > sortedTempArr[j + 1].val) {\n        const temp = sortedTempArr[j + 1];\n        sortedTempArr[j + 1] = sortedTempArr[j];\n        sortedTempArr[j] = temp;\n        setRange(sortedTempArr);\n        sortedArr = sortedTempArr;\n        console.log('swap');\n        await helperDelay(50);\n      }\n    }\n  }\n\n  console.log(sortedArr);\n};\n\nexport default bubbleSort;\n","const selectionSort = async (range, setRange, helperDelay) => {\n  let sortedArr = [];\n  for (let i = 0; i < range.length; i++) {\n    sortedArr.push(range[i]);\n  }\n\n  for (let i = 0; i < sortedArr.length; i++) {\n    await helperDelay(50);\n\n    let currMin = i;\n    for (let j = i + 1; j < sortedArr.length + 1; j++) {\n      const sortedTempArr = [];\n      for (let k = 0; k < sortedArr.length; k++) {\n        sortedTempArr.push(sortedArr[k]);\n      }\n\n      if (j === sortedArr.length) {\n        // swap currMin with index i\n        const temp = sortedArr[currMin];\n        sortedTempArr[currMin] = sortedTempArr[i];\n        sortedTempArr[i] = temp;\n        sortedTempArr[i].isSorted = true;\n        sortedArr = sortedTempArr;\n        setRange(sortedTempArr);\n        await helperDelay(50);\n      } else if (sortedTempArr[j].val < sortedTempArr[currMin].val) {\n        currMin = j;\n        sortedArr = sortedTempArr;\n        setRange(sortedTempArr);\n        await helperDelay(50);\n      }\n    }\n  }\n\n  console.log(sortedArr);\n};\nexport default selectionSort;\n","// implements bottom-up merge sort for easier visualization\nconst mergeSort = async (range, setRange, helperDelay) => {\n  let sortedArr = [];\n  for (let i = 0; i < range.length; i++) {\n    sortedArr.push(range[i]);\n  }\n\n  let subSize = 1; // size of subsize arr for merge operation (i.e. [ sorted arr of size subSize ] [ sorted arr of size subSize ])\n  let currIndex = 0; // keeps track of the current index\n  while (subSize < range.length) {\n    // iterate from start to end of arr for every consecutive (subSize * 2) array slice\n    while (currIndex < sortedArr.length) {\n      const firstArr = [];\n      const secondArr = [];\n      let currPtr = currIndex;\n      let firstPtr = 0;\n      let secondPtr = 0;\n\n      for (let i = 0; i < subSize; i++) {\n        if (currIndex === range.length) {\n          break;\n        }\n        firstArr.push({\n          val: sortedArr[currIndex].val,\n          isSorted: sortedArr[currIndex].isSorted,\n        });\n        currIndex++;\n      }\n\n      for (let i = 0; i < subSize; i++) {\n        if (currIndex === range.length) {\n          break;\n        }\n        secondArr.push({\n          val: sortedArr[currIndex].val,\n          isSorted: sortedArr[currIndex].isSorted,\n        });\n        currIndex++;\n      }\n\n      const lowerIndex = currPtr;\n      const highIndex = currIndex - 1;\n      sortedArr[lowerIndex].underConsideration = true;\n      sortedArr[highIndex].underConsideration = true;\n      let temp = deepCopyValAndIsSorted(sortedArr);\n      setRange(temp);\n      await helperDelay(50);\n\n      // merge firstArr and secondArr\n      while (firstPtr < firstArr.length && secondPtr < secondArr.length) {\n        const firstEle = firstArr[firstPtr];\n        const secondEle = secondArr[secondPtr];\n\n        if (firstEle.val > secondEle.val) {\n          sortedArr[currPtr] = secondEle;\n          secondPtr++;\n        } else {\n          sortedArr[currPtr] = firstEle;\n          firstPtr++;\n        }\n\n        sortedArr[currPtr].isSorted = true;\n        temp = deepCopyValAndIsSorted(sortedArr);\n        setRange(temp);\n        await helperDelay(50);\n        currPtr++;\n      }\n\n      while (firstPtr < firstArr.length) {\n        sortedArr[currPtr] = firstArr[firstPtr];\n        sortedArr[currPtr].isSorted = true;\n        temp = deepCopyValAndIsSorted(sortedArr);\n        setRange(temp);\n        await helperDelay(50);\n        firstPtr++;\n        currPtr++;\n      }\n\n      while (secondPtr < secondArr.length) {\n        sortedArr[currPtr] = secondArr[secondPtr];\n        sortedArr[currPtr].isSorted = true;\n        temp = deepCopyValAndIsSorted(sortedArr);\n        setRange(temp);\n        await helperDelay(50);\n        secondPtr++;\n        currPtr++;\n      }\n\n      sortedArr[lowerIndex].underConsideration = false;\n      sortedArr[highIndex].underConsideration = false;\n      temp = deepCopyValAndIsSorted(sortedArr);\n\n      setRange(temp);\n      await helperDelay(50);\n    }\n\n    sortedArr = deepCopyOnlyVal(sortedArr);\n    subSize *= 2;\n    currIndex = 0;\n  }\n\n  console.log(sortedArr);\n};\n\n// utility function to deepcopy array containing SortBars\nconst deepCopyOnlyVal = arr => {\n  const temp = [];\n  for (let i = 0; i < arr.length; i++) {\n    temp.push({\n      val: arr[i].val,\n    });\n  }\n  return temp;\n};\n\nconst deepCopyValAndIsSorted = arr => {\n  const temp = [];\n  for (let i = 0; i < arr.length; i++) {\n    temp.push({\n      val: arr[i].val,\n      isSorted: arr[i].isSorted,\n      underConsideration: arr[i].underConsideration,\n    });\n  }\n  return temp;\n};\n\nexport default mergeSort;\n","import React, {useState} from 'react';\nimport {Slider, Button, Select} from 'antd';\nimport BarSort from './BarSort';\nimport Legend from './Legend';\nimport './SortArray.css';\nimport knuthShuffle from '../helpers/knuthShuffle';\nimport insertionSort from '../helpers/insertionSort';\nimport bubbleSort from '../helpers/bubbleSort';\nimport selectionSort from '../helpers/selectionSort';\nimport mergeSort from '../helpers/mergeSort';\n\nconst {Option} = Select;\n\nfunction SortArray(props) {\n  // 0% - (100% - WIDTH%) width to divide bars\n  // default width of 1 bar is 1.5%\n  // height 0 - 65%\n\n  const initialRange = [];\n  for (let i = 0; i < 10; i++) {\n    initialRange.push({\n      val: i + 1,\n      isSorted: false,\n    });\n  }\n  knuthShuffle(initialRange);\n\n  const [range, setRange] = useState(initialRange);\n  const [sortingAlgo, setSortingAlgo] = useState('insertionSort'); //insertion sort by default\n  const [sortingInProgress, setSortingInProgress] = useState(false); //to disable buttons when sorting is ongoing\n  const helperDelay = ms => new Promise(res => setTimeout(res, ms));\n\n  const reset = () => {\n    setSortingAlgo('insertionSort');\n    knuthShuffle(initialRange);\n    setRange(initialRange);\n  };\n\n  const randomize = () => {\n    const newRange = [];\n    for (let i = 0; i < range.length; i++) {\n      newRange.push(range[i]);\n    }\n    knuthShuffle(newRange);\n    setRange(newRange);\n  };\n\n  const handleSort = async () => {\n    setSortingInProgress(true);\n    switch (sortingAlgo) {\n      case 'insertionSort':\n        await insertionSort(range, setRange, helperDelay);\n        break;\n      case 'bubbleSort':\n        await bubbleSort(range, setRange, helperDelay);\n        break;\n      case 'selectionSort':\n        await selectionSort(range, setRange, helperDelay);\n        break;\n      case 'mergeSort':\n        await mergeSort(range, setRange, helperDelay);\n        break;\n      default:\n        return;\n    }\n    setSortingInProgress(false);\n  };\n\n  const renderBar = (bar, index) => {\n    const numTotalBars = range.length;\n\n    let width;\n    if (numTotalBars <= 20) {\n      width = 1.5;\n    } else if (numTotalBars <= 40) {\n      width = 1.25;\n    } else if (numTotalBars <= 60) {\n      width = 1;\n    } else if (numTotalBars <= 80) {\n      width = 0.75;\n    } else {\n      width = 0.5;\n    }\n\n    const tolWidth = 100 - width;\n    const leftInterval = tolWidth / (numTotalBars - 1);\n    const heightInterval = 100 / numTotalBars;\n\n    const left = index * leftInterval;\n    const height = bar.val * heightInterval;\n\n    return (\n      <BarSort\n        isMin={bar.isMin}\n        isSorted={bar.isSorted}\n        underConsideration={bar.underConsideration}\n        left={left}\n        height={height}\n        width={width}\n      />\n    );\n  };\n\n  return (\n    <div style={{textAlign: 'center', height: '100%'}}>\n      <h2>\n        Select total number of bars from 2 to 100:\n        <Slider\n          onChange={e => {\n            let temp = [];\n            for (let i = 0; i < e; i++) {\n              temp.push({\n                val: i + 1,\n              });\n            }\n            knuthShuffle(temp);\n            setRange(temp);\n          }}\n          value={range.length}\n          min={2}\n          max={100}\n        />\n        <br />\n        Sort Number from 1 to {range.length} using\n        <Select\n          style={{marginLeft: '1em', width: '9em'}}\n          value={sortingAlgo}\n          onChange={e => setSortingAlgo(e)}>\n          <Option value=\"insertionSort\">Insertion Sort</Option>\n          <Option value=\"bubbleSort\">Bubble Sort</Option>\n          <Option value=\"selectionSort\">Selection Sort</Option>\n          <Option value=\"mergeSort\">Merge Sort</Option>\n        </Select>\n      </h2>\n      <Button\n        disabled={sortingInProgress}\n        onClick={handleSort}\n        type=\"primary\"\n        icon=\"play-circle\"\n        style={{marginBottom: '1em', marginRight: '1em'}}>\n        Sort!\n      </Button>\n      <Button\n        type=\"primary\"\n        disabled={sortingInProgress}\n        icon=\"redo\"\n        onClick={e => randomize()}\n        style={{marginRight: '1em'}}>\n        Randomize\n      </Button>\n      <Button\n        disabled={sortingInProgress}\n        type=\"primary\"\n        icon=\"redo\"\n        onClick={e => reset()}>\n        Reset\n      </Button>\n      <div className=\"SortArray\">\n        {range.map((bar, index) => (bar ? renderBar(bar, index) : 0))}\n      </div>\n      <br />\n      <Legend />\n    </div>\n  );\n}\n\nexport default SortArray;\n","import React from 'react';\nimport SortArray from './components/SortArray';\nimport './style.css';\n\nfunction SortPage(props) {\n  return (\n    <div className=\"wrapper\">\n      <SortArray />\n    </div>\n  );\n}\n\nexport default SortPage;\n","// mutable BSTNode\nclass BSTNode {\n  constructor(key, left, right, parent) {\n    this.key = key;\n    this.left = left;\n    this.right = right;\n    this.parent = parent;\n  }\n\n  // make sure parent pointers of child and child pointers are set correctly\n  // i.e. parent <-> child\n  checkPtrs() {\n    let checkLeft = true;\n    let checkRight = true;\n\n    if (this.left !== null) {\n      checkLeft = this.left.parent === this;\n      checkLeft = checkLeft && this.left.checkPtrs();\n    } else if (this.right !== null) {\n      checkRight = this.right.parent === this;\n      checkRight = checkRight && this.right.checkPtrs();\n    }\n\n    return checkLeft && checkRight;\n  }\n\n  setLeft(leftChild) {\n    this.left = leftChild;\n  }\n\n  setRight(rightChild) {\n    this.right = rightChild;\n  }\n\n  setParent(parent) {\n    this.parent = parent;\n  }\n\n  search(key) {\n    if (this.key === key) {\n      return this;\n    }\n\n    if (this.isLeaf()) {\n      return this;\n    }\n\n    if (key < this.key) {\n      return this.left === null ? this : this.left.search(key);\n    } else {\n      return this.right === null ? this : this.right.search(key);\n    }\n  }\n\n  add(newNode) {\n    if (newNode.key < this.key) {\n      if (this.left === null) {\n        newNode.setParent(this);\n        this.setLeft(newNode);\n        return;\n      } else {\n        this.left.add(newNode);\n      }\n    } else {\n      if (this.right === null) {\n        newNode.setParent(this);\n        this.setRight(newNode);\n      } else {\n        this.right.add(newNode);\n      }\n    }\n  }\n\n  findMin() {\n    if (this.left !== null) {\n      return this.left.findMin();\n    } else {\n      console.log(`min is ${this.key}`);\n      return this;\n    }\n  }\n\n  findMax() {\n    if (this.right !== null) {\n      return this.right.findMax();\n    } else {\n      console.log(`max is ${this.key}`);\n      return this;\n    }\n  }\n\n  successor(key) {\n    let nearestNode = this.search(key);\n\n    if (nearestNode.key > key) {\n      console.log(`search: successor of ${key} is ${nearestNode.key}`);\n      return nearestNode;\n    }\n\n    // else, find successor of nearestNode\n    if (nearestNode.right !== null) {\n      return nearestNode.right.findMin();\n    } else {\n      // no right child, travel up parent pointer until it branches to right\n\n      let nearestNodeParent = nearestNode.parent;\n      while (nearestNodeParent !== null) {\n        if (nearestNodeParent.left === nearestNode) {\n          console.log(`successor of ${key} is ${nearestNodeParent.key}`);\n          return nearestNodeParent;\n        }\n\n        nearestNode = nearestNodeParent;\n        nearestNodeParent = nearestNode.parent;\n      }\n      console.log(`no successor found for ${key}`);\n      return null;\n    }\n  }\n\n  predeccesor(key) {\n    let nearestNode = this.search(key);\n\n    if (nearestNode.key < key) {\n      console.log(`search: predeccesor of ${key} is ${nearestNode.key}`);\n      return nearestNode;\n    }\n\n    // else, find successor of nearestNode\n    if (nearestNode.left !== null) {\n      return nearestNode.left.findMax();\n    } else {\n      // no left child, travel up parent pointer until it branches to left\n\n      let nearestNodeParent = nearestNode.parent;\n      while (nearestNodeParent !== null) {\n        if (nearestNodeParent.right === nearestNode) {\n          console.log(`predeccesor of ${key} is ${nearestNodeParent.key}`);\n          return nearestNodeParent;\n        }\n\n        nearestNode = nearestNodeParent;\n        nearestNodeParent = nearestNode.parent;\n      }\n      console.log(`no predeccesor found for ${key}`);\n      return null;\n    }\n  }\n\n  // this == root, assume not deleting root node\n  delete(delNode) {\n    console.log(delNode);\n    const rootNode = this;\n    const parentNode = delNode.parent;\n\n    if (delNode.isLeaf()) {\n      // no children, just delete from parent\n      if (parentNode.left === delNode) {\n        parentNode.setLeft(null);\n      } else {\n        // right child\n        parentNode.setRight(null);\n      }\n      return this;\n    } else if (delNode.left === null && delNode.right) {\n      // 1 child, just link the searchedNode child and searchedNode parent\n      delNode.right.setParent(parentNode);\n      if (parentNode !== null) {\n        if (parentNode.left === delNode) {\n          parentNode.setLeft(delNode.right);\n        } else {\n          // right child\n          parentNode.setRight(delNode.right);\n        }\n        return this;\n      } else {\n        // deleting root\n        return delNode.right;\n      }\n    } else if (delNode.left && delNode.right === null) {\n      delNode.left.setParent(parentNode);\n      if (parentNode !== null) {\n        if (parentNode.left === delNode) {\n          parentNode.setLeft(delNode.left);\n        } else {\n          // right child\n          parentNode.setRight(delNode.left);\n        }\n        return this;\n      } else {\n        // deleting root\n        return delNode.left;\n      }\n    } else {\n      // 2 children\n      const successorNode = delNode.right.findMin();\n      const succRightChild = successorNode.right;\n      const succParent = successorNode.parent;\n      const succIsRightChild = succParent.right === successorNode;\n\n      delNode.left.setParent(successorNode);\n      delNode.right.setParent(successorNode);\n      successorNode.left = delNode.left;\n      successorNode.right = delNode.right;\n\n      successorNode.setParent(delNode.parent);\n      if (delNode.parent !== null) {\n        if (delNode.parent.left === delNode) {\n          delNode.parent.setLeft(successorNode);\n        } else {\n          // delNode is right child\n          delNode.parent.setRight(successorNode);\n        }\n      }\n\n      if (delNode.key === succParent.key) {\n        delNode.setParent(successorNode);\n        if (succIsRightChild) {\n          successorNode.setRight(delNode);\n        } else {\n          successorNode.setLeft(delNode);\n        }\n      } else {\n        delNode.setParent(succParent);\n        if (succIsRightChild) {\n          succParent.setRight(delNode);\n        } else {\n          succParent.setLeft(delNode);\n        }\n      }\n\n      delNode.setLeft(null);\n      if (succRightChild !== null) {\n        succRightChild.setParent(delNode);\n      }\n      delNode.setRight(succRightChild);\n\n      this.delete(delNode);\n      if (delNode.key === rootNode.key) {\n        return successorNode;\n      } else {\n        return this;\n      }\n    }\n  }\n\n  isLeaf() {\n    return this.left === null && this.right === null;\n  }\n\n  getData() {\n    const children = [];\n\n    if (this.left !== null) {\n      children.push(this.left.getData());\n    }\n\n    if (this.right !== null) {\n      children.push(this.right.getData());\n    }\n\n    return {\n      name: this.key,\n      children,\n    };\n  }\n}\n\nexport default BSTNode;\n","import BSTNode from './BSTNode';\n\n// BSTNode wrapper class (immutable) -- pointers are broken in javascript\nclass BSTTreeData {\n  constructor(rootNode) {\n    if (rootNode === null) {\n      this.rootNode = new BSTNode(10, null, null, null);\n    } else {\n      this.rootNode = rootNode;\n    }\n  }\n\n  search(key) {\n    const searchedNode = this.rootNode.search(key);\n    console.log(searchedNode.key);\n    return searchedNode;\n  }\n\n  add(key) {\n    const newNode = new BSTNode(key, null, null, null);\n    this.rootNode.add(newNode);\n    console.log(this.rootNode.checkPtrs());\n    return new BSTTreeData(this.rootNode);\n  }\n\n  findMin() {\n    return this.rootNode.findMin();\n  }\n\n  findMax() {\n    return this.rootNode.findMax();\n  }\n\n  succ(key) {\n    return this.rootNode.successor(key);\n  }\n\n  pred(key) {\n    return this.rootNode.predeccesor(key);\n  }\n\n  // assuming key exists in tree\n  delete(key) {\n    const delNode = this.search(key);\n    if (delNode.key !== key) {\n      return this;\n    }\n    this.rootNode = this.rootNode.delete(delNode);\n    console.log(this.rootNode.checkPtrs());\n    return new BSTTreeData(this.rootNode);\n  }\n\n  getData() {\n    return this.rootNode.getData();\n  }\n}\n\nexport default BSTTreeData;\n","import React, {useState, useEffect} from 'react';\nimport Tree from 'react-d3-tree';\nimport {Button, InputNumber, message} from 'antd';\nimport BSTTreeData from '../classes/BSTTreeData';\n\nfunction BinarySearchTree(props) {\n  const [treeContainer, setTreeContainer] = useState(null);\n  const [translate, setTranslate] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [treeData, setTreeData] = useState(new BSTTreeData(null));\n  const [key, setKey] = useState(5);\n\n  useEffect(() => {\n    if (treeContainer != null) {\n      const dimensions = treeContainer.getBoundingClientRect();\n      setTranslate({\n        x: dimensions.width / 2,\n        y: dimensions.height * 0.1,\n      });\n    }\n  }, [treeContainer]);\n\n  return (\n    <div>\n      <div\n        style={{\n          height: '72.5vh',\n          border: '0.5em double cornflowerblue',\n          borderRadius: '2em',\n        }}\n        ref={tc => setTreeContainer(tc)}>\n        <Tree\n          data={treeData.getData()}\n          translate={translate}\n          orientation=\"vertical\"\n          transitionDuration={0}\n        />\n      </div>\n      <div style={{textAlign: 'left', marginTop: '1em'}}>\n        <h2>\n          Key:{' '}\n          <InputNumber defaultValue={key} onChange={e => setKey(e)} />{' '}\n        </h2>\n        <h2>BST Operations:</h2>\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"plus\"\n          onClick={e => {\n            const searchedNode = treeData.search(key);\n            if (searchedNode.key === key) {\n              message.error(`Key ${key} is already in the BST Tree!`);\n            } else {\n              setTreeData(treeData.add(key));\n            }\n          }}>\n          Insert\n        </Button>\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"cross\"\n          onClick={e => {\n            const searchedNode = treeData.search(key);\n            if (searchedNode.key !== key) {\n              message.error(`Did not find ${key} in the BST`);\n            } else {\n              const min = treeData.findMin();\n              const max = treeData.findMax();\n              if (min.key === max.key) {\n                // only 1 node in tree, cannot delete\n                message.error(\n                  `Cannot delete ${key} as it is the only node in the BST!`,\n                );\n              } else {\n                setTreeData(treeData.delete(key));\n              }\n            }\n          }}>\n          Delete\n        </Button>\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"search\"\n          onClick={e => {\n            const searchedNode = treeData.search(key);\n            if (searchedNode.key !== key) {\n              message.error(`Did not find ${key} in the BST`);\n            } else {\n              message.success(`Found ${key}!`);\n            }\n          }}>\n          Find\n        </Button>\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"fall\"\n          onClick={e =>\n            message.success(`Minimum is ${treeData.findMin().key}!`)\n          }>\n          FindMin\n        </Button>{' '}\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"rise\"\n          onClick={e =>\n            message.success(`Maximum is ${treeData.findMax().key}!`)\n          }>\n          FindMax\n        </Button>\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"right\"\n          onClick={e => {\n            const succ = treeData.succ(key);\n            if (succ === null) {\n              message.error(`There is no successor of ${key}`);\n            } else {\n              message.success(`Successor of ${key} is ${succ.key}!`);\n            }\n          }}>\n          Successor\n        </Button>\n        <Button\n          onClick={e => {\n            const pred = treeData.pred(key);\n            if (pred === null) {\n              message.error(`There is no predeccesor of ${key}`);\n            } else {\n              message.success(`Predecessor of ${key} is ${pred.key}!`);\n            }\n          }}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"left\">\n          Predecessor\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default BinarySearchTree;\n","// mutable BSTNode\nclass AVLNode {\n  constructor(key, left, right, parent, height) {\n    this.key = key;\n    this.left = left;\n    this.right = right;\n    this.parent = parent;\n    this.height = height;\n  }\n\n  // check rep invariant that diff in heght of childs is < 2\n  // and height of parent = max(left.height, right.height) + 1\n  checkRI() {\n    const leftChildHeight = this.left === null ? -1 : this.left.height;\n    const rightChildHeight = this.right === null ? -1 : this.right.height;\n    if (Math.abs(leftChildHeight - rightChildHeight) >= 2) {\n      console.log(`RI INVALID! ${this.key}`);\n    }\n    if (Math.max(leftChildHeight, rightChildHeight) + 1 !== this.height) {\n      console.log(`HEIGHT INVALID! ${this.key}`);\n    }\n    if (this.left) {\n      this.left.checkRI();\n    }\n    if (this.right) {\n      this.right.checkRI();\n    }\n  }\n\n  // make sure parent pointers of child and child pointers are set correctly\n  // i.e. parent <-> child\n  checkPtrs() {\n    let checkLeft = true;\n    let checkRight = true;\n\n    if (this.left !== null) {\n      checkLeft = this.left.parent === this;\n      checkLeft = checkLeft && this.left.checkPtrs();\n    } else if (this.right !== null) {\n      checkRight = this.right.parent === this;\n      checkRight = checkRight && this.right.checkPtrs();\n    }\n\n    return checkLeft && checkRight;\n  }\n\n  setLeft(leftChild) {\n    this.left = leftChild;\n  }\n\n  setRight(rightChild) {\n    this.right = rightChild;\n  }\n\n  setParent(parent) {\n    this.parent = parent;\n  }\n\n  setHeight(height) {\n    this.height = height;\n  }\n\n  // recomputes its height based on child height\n  maintainHeight() {\n    const leftChildHeight = this.left === null ? -1 : this.left.height;\n    const rightChildHeight = this.right === null ? -1 : this.right.height;\n    this.setHeight(Math.max(leftChildHeight, rightChildHeight) + 1);\n  }\n\n  // called from root\n  balanceOneViolation(violatedNode) {\n    let res;\n    if (violatedNode.isLeftHeavy()) {\n      // left child exists\n      if (violatedNode.left.isLeftHeavy()) {\n        // both violated node and violated node's left child is left heavy, can do right rotate\n        res = violatedNode.left.rightRotate();\n      } else if (violatedNode.left.isRightHeavy()) {\n        // violated node left heavy and violated node's left child right heavy, do left rotate on violated node's left child's right child,\n        // then do right rotate on violated node's left child\n        const newViolatedNodeLeftChild = violatedNode.left.right.leftRotate();\n        res = newViolatedNodeLeftChild.rightRotate();\n      } else {\n        // violated node left heavy and violated node's left child balanced, can do right rotate\n        res = violatedNode.left.rightRotate();\n      }\n    } else {\n      // right child exists\n      // violated node right heavy\n      if (violatedNode.right.isRightHeavy()) {\n        // both violated node and violated node's right child is right heavy, can do left rotate\n        res = violatedNode.right.leftRotate();\n      } else if (violatedNode.right.isLeftHeavy()) {\n        // violated node right heavy and violated node's right child left heavy, do right rotate on violated node's right child's left child,\n        // then do left rotate on violated node's right child\n        const newViolatedNodeRightChild = violatedNode.right.left.rightRotate();\n        res = newViolatedNodeRightChild.leftRotate();\n      } else {\n        // violated node right heavy and violated node's right child balanced, can do left rotate\n        res = violatedNode.right.leftRotate();\n      }\n    }\n    return res;\n  }\n\n  balanceAllViolation(startNode) {\n    let balancedNode;\n\n    while (startNode !== null) {\n      const leftChildHeight =\n        startNode.left === null ? -1 : startNode.left.height;\n      const rightChildHeight =\n        startNode.right === null ? -1 : startNode.right.height;\n      if (Math.abs(leftChildHeight - rightChildHeight) >= 2) {\n        // violated node\n        balancedNode = this.balanceOneViolation(startNode);\n      } else {\n        balancedNode = startNode;\n      }\n      startNode = balancedNode.parent;\n    }\n    return balancedNode;\n  }\n\n  isLeftHeavy() {\n    const leftChildHeight = this.left === null ? -1 : this.left.height;\n    const rightChildHeight = this.right === null ? -1 : this.right.height;\n    return leftChildHeight > rightChildHeight;\n  }\n\n  isRightHeavy() {\n    const leftChildHeight = this.left === null ? -1 : this.left.height;\n    const rightChildHeight = this.right === null ? -1 : this.right.height;\n    return rightChildHeight > leftChildHeight;\n  }\n\n  rightRotate() {\n    let parent = this.parent;\n    let grandparent = parent.parent;\n\n    parent.setLeft(this.right);\n    if (this.parent.left) {\n      parent.left.setParent(parent);\n    }\n\n    parent.setParent(this);\n    this.setRight(parent);\n\n    this.setParent(grandparent);\n    if (grandparent) {\n      if (grandparent.right === parent) {\n        grandparent.setRight(this);\n      } else {\n        //parent is left child\n        grandparent.setLeft(this);\n      }\n    }\n    parent.maintainHeight();\n    this.maintainHeight();\n\n    parent = this.parent;\n    while (parent !== null) {\n      parent.maintainHeight();\n      parent = parent.parent;\n    }\n    return this;\n  }\n\n  leftRotate() {\n    let parent = this.parent;\n    let grandparent = parent.parent;\n\n    parent.setRight(this.left);\n    if (this.parent.right) {\n      parent.right.setParent(parent);\n    }\n\n    parent.setParent(this);\n    this.setLeft(parent);\n\n    this.setParent(grandparent);\n    if (grandparent) {\n      if (grandparent.right === parent) {\n        grandparent.setRight(this);\n      } else {\n        //parent is left child\n        grandparent.setLeft(this);\n      }\n    }\n    parent.maintainHeight();\n    this.maintainHeight();\n\n    parent = this.parent;\n    while (parent !== null) {\n      parent.maintainHeight();\n      parent = parent.parent;\n    }\n    return this;\n  }\n\n  search(key) {\n    if (this.key === key) {\n      return this;\n    }\n\n    if (this.isLeaf()) {\n      return this;\n    }\n\n    if (key < this.key) {\n      return this.left === null ? this : this.left.search(key);\n    } else {\n      return this.right === null ? this : this.right.search(key);\n    }\n  }\n\n  add(newNode) {\n    if (newNode.key < this.key) {\n      if (this.left === null) {\n        newNode.setParent(this);\n        this.setLeft(newNode);\n      } else {\n        this.left.add(newNode);\n      }\n    } else {\n      if (this.right === null) {\n        newNode.setParent(this);\n        this.setRight(newNode);\n      } else {\n        this.right.add(newNode);\n      }\n    }\n    this.maintainHeight();\n  }\n\n  findMin() {\n    if (this.left !== null) {\n      return this.left.findMin();\n    } else {\n      return this;\n    }\n  }\n\n  findMax() {\n    if (this.right !== null) {\n      return this.right.findMax();\n    } else {\n      return this;\n    }\n  }\n\n  successor(key) {\n    let nearestNode = this.search(key);\n\n    if (nearestNode.key > key) {\n      return nearestNode;\n    }\n\n    // else, find successor of nearestNode\n    if (nearestNode.right !== null) {\n      return nearestNode.right.findMin();\n    } else {\n      // no right child, travel up parent pointer until it branches to right\n\n      let nearestNodeParent = nearestNode.parent;\n      while (nearestNodeParent !== null) {\n        if (nearestNodeParent.left === nearestNode) {\n          return nearestNodeParent;\n        }\n\n        nearestNode = nearestNodeParent;\n        nearestNodeParent = nearestNode.parent;\n      }\n      return null;\n    }\n  }\n\n  predeccesor(key) {\n    let nearestNode = this.search(key);\n\n    if (nearestNode.key < key) {\n      return nearestNode;\n    }\n\n    // else, find successor of nearestNode\n    if (nearestNode.left !== null) {\n      return nearestNode.left.findMax();\n    } else {\n      // no left child, travel up parent pointer until it branches to left\n\n      let nearestNodeParent = nearestNode.parent;\n      while (nearestNodeParent !== null) {\n        if (nearestNodeParent.right === nearestNode) {\n          return nearestNodeParent;\n        }\n\n        nearestNode = nearestNodeParent;\n        nearestNodeParent = nearestNode.parent;\n      }\n      return null;\n    }\n  }\n\n  // this == root\n  delete(delNode) {\n    const rootNode = this;\n    const parentNode = delNode.parent;\n\n    if (delNode.isLeaf()) {\n      // no children, just delete from parent\n      if (parentNode.left === delNode) {\n        parentNode.setLeft(null);\n      } else {\n        // right child\n        parentNode.setRight(null);\n      }\n\n      // update heights\n      let parent = parentNode;\n      while (parent !== null) {\n        parent.maintainHeight();\n        parent = parent.parent;\n      }\n\n      // balance violations (if any) from parentNode up towards the root\n      return this.balanceAllViolation(parentNode);\n    } else if (delNode.left === null && delNode.right) {\n      // 1 child, just link the searchedNode child and searchedNode parent\n      delNode.right.setParent(parentNode);\n      if (parentNode !== null) {\n        if (parentNode.left === delNode) {\n          parentNode.setLeft(delNode.right);\n        } else {\n          // right child\n          parentNode.setRight(delNode.right);\n        }\n        // update heights\n        let parent = parentNode;\n        while (parent !== null) {\n          parent.maintainHeight();\n          parent = parent.parent;\n        }\n        return this.balanceAllViolation(parentNode);\n      } else {\n        // deleting root\n        return delNode.right;\n      }\n    } else if (delNode.left && delNode.right === null) {\n      delNode.left.setParent(parentNode);\n      if (parentNode !== null) {\n        if (parentNode.left === delNode) {\n          parentNode.setLeft(delNode.left);\n        } else {\n          // right child\n          parentNode.setRight(delNode.left);\n        }\n        // update heights\n        let parent = parentNode;\n        while (parent !== null) {\n          parent.maintainHeight();\n          parent = parent.parent;\n        }\n        return this.balanceAllViolation(parentNode);\n      } else {\n        // deleting root\n        return delNode.left;\n      }\n    } else {\n      // 2 children\n      const successorNode = delNode.right.findMin();\n      const succRightChild = successorNode.right;\n      const succParent = successorNode.parent;\n      const succIsRightChild = succParent.right === successorNode;\n\n      delNode.left.setParent(successorNode);\n      delNode.right.setParent(successorNode);\n      successorNode.left = delNode.left;\n      successorNode.right = delNode.right;\n\n      successorNode.setParent(delNode.parent);\n      if (delNode.parent !== null) {\n        if (delNode.parent.left === delNode) {\n          delNode.parent.setLeft(successorNode);\n        } else {\n          // delNode is right child\n          delNode.parent.setRight(successorNode);\n        }\n      }\n\n      if (delNode.key === succParent.key) {\n        delNode.setParent(successorNode);\n        if (succIsRightChild) {\n          successorNode.setRight(delNode);\n        } else {\n          successorNode.setLeft(delNode);\n        }\n      } else {\n        delNode.setParent(succParent);\n        if (succIsRightChild) {\n          succParent.setRight(delNode);\n        } else {\n          succParent.setLeft(delNode);\n        }\n      }\n\n      delNode.setLeft(null);\n      if (succRightChild !== null) {\n        succRightChild.setParent(delNode);\n      }\n      delNode.setRight(succRightChild);\n\n      return this.delete(delNode);\n    }\n  }\n\n  isLeaf() {\n    return this.left === null && this.right === null;\n  }\n\n  getData() {\n    const children = [];\n\n    if (this.left !== null) {\n      children.push(this.left.getData());\n    }\n\n    if (this.right !== null) {\n      children.push(this.right.getData());\n    }\n\n    return {\n      name: this.key,\n      attributes: {\n        Height: this.height,\n      },\n      children,\n    };\n  }\n}\n\nexport default AVLNode;\n","import AVLNode from './AVLNode';\n\n// BSTNode wrapper class (immutable) -- pointers are broken in javascript\nclass AVLTreeData {\n  constructor(rootNode) {\n    if (rootNode === null) {\n      this.rootNode = new AVLNode(10, null, null, null, 0);\n    } else {\n      this.rootNode = rootNode;\n    }\n  }\n\n  // called from the root, tests on random input insertion / deletion, making sure checkRI and checkPtrs are true\n  testRandom() {\n    const presentNum = [10];\n    for (let i = 0; i < 1000; i++) {\n      let randInt = Math.floor(Math.random() * 2);\n      if (randInt === 0) {\n        // deletion\n        if (presentNum.length === 1) {\n          continue;\n        }\n        let randIndex = Math.floor(Math.random() * presentNum.length);\n        const deleteKey = presentNum[randIndex];\n        this.delete(deleteKey);\n        presentNum.splice(randIndex, 1);\n      } else {\n        // insertion\n        let insertKey = Math.floor(Math.random() * 100);\n        while (presentNum.includes(insertKey)) {\n          insertKey = Math.floor(Math.random() * 100);\n        }\n        this.add(insertKey);\n        presentNum.push(insertKey);\n      }\n    }\n    return new AVLTreeData(this.rootNode);\n  }\n\n  search(key) {\n    const searchedNode = this.rootNode.search(key);\n    return searchedNode;\n  }\n\n  add(key) {\n    const newNode = new AVLNode(key, null, null, null, 0);\n    this.rootNode.add(newNode);\n    const balancedNode = this.rootNode.balanceAllViolation(newNode);\n    if (balancedNode !== this.rootNode) {\n      this.rootNode = balancedNode;\n    }\n    if (!this.rootNode.checkPtrs) {\n      console.log(this.rootNode.checkPtrs());\n    }\n    this.rootNode.checkRI();\n    return new AVLTreeData(this.rootNode);\n  }\n\n  findMin() {\n    return this.rootNode.findMin();\n  }\n\n  findMax() {\n    return this.rootNode.findMax();\n  }\n\n  succ(key) {\n    return this.rootNode.successor(key);\n  }\n\n  pred(key) {\n    return this.rootNode.predeccesor(key);\n  }\n\n  // assuming key exists in tree\n  delete(key) {\n    const delNode = this.search(key);\n    if (delNode.key !== key) {\n      return this;\n    }\n    this.rootNode = this.rootNode.delete(delNode);\n    if (!this.rootNode.checkPtrs) {\n      console.log(this.rootNode.checkPtrs());\n    }\n    this.rootNode.checkRI();\n    return new AVLTreeData(this.rootNode);\n  }\n\n  getData() {\n    return this.rootNode.getData();\n  }\n}\n\nexport default AVLTreeData;\n","import React, {useState, useEffect} from 'react';\nimport Tree from 'react-d3-tree';\nimport {Button, InputNumber, message} from 'antd';\nimport AVLTreeData from '../classes/AVLTreeData';\n\nfunction AVLTree(props) {\n  const [treeContainer, setTreeContainer] = useState(null);\n  const [translate, setTranslate] = useState({\n    x: 0,\n    y: 0,\n  });\n  const [treeData, setTreeData] = useState(new AVLTreeData(null));\n  const [key, setKey] = useState(5);\n\n  useEffect(() => {\n    if (treeContainer != null) {\n      const dimensions = treeContainer.getBoundingClientRect();\n      setTranslate({\n        x: dimensions.width / 2,\n        y: dimensions.height * 0.1,\n      });\n    }\n  }, [treeContainer]);\n\n  return (\n    <div>\n      <div\n        style={{\n          height: '72.5vh',\n          border: '0.5em double cornflowerblue',\n          borderRadius: '2em',\n        }}\n        ref={tc => setTreeContainer(tc)}>\n        <Tree\n          data={treeData.getData()}\n          translate={translate}\n          orientation=\"vertical\"\n          transitionDuration={0}\n        />\n      </div>\n      <div style={{textAlign: 'left', marginTop: '1em'}}>\n        <h2>\n          Key:{' '}\n          <InputNumber min={0} defaultValue={key} onChange={e => setKey(e)} />{' '}\n        </h2>\n        <h2>AVL Tree Operations:</h2>\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"plus\"\n          onClick={e => {\n            const searchedNode = treeData.search(key);\n            if (searchedNode.key === key) {\n              message.error(`Key ${key} is already in the AVL Tree!`);\n            } else {\n              setTreeData(treeData.add(key));\n            }\n          }}>\n          Insert\n        </Button>\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"cross\"\n          onClick={e => {\n            const searchedNode = treeData.search(key);\n            if (searchedNode.key !== key) {\n              message.error(`Did not find ${key} in the AVL Tree`);\n            } else {\n              const min = treeData.findMin();\n              const max = treeData.findMax();\n              if (min.key === max.key) {\n                // only 1 node in tree, cannot delete\n                message.error(\n                  `Cannot delete ${key} as it is the only node in the AVL Tree!`,\n                );\n              } else {\n                setTreeData(treeData.delete(key));\n              }\n            }\n          }}>\n          Delete\n        </Button>\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"search\"\n          onClick={e => {\n            const searchedNode = treeData.search(key);\n            if (searchedNode.key !== key) {\n              message.error(`Did not find ${key} in the AVL Tree`);\n            } else {\n              message.success(`Found ${key}!`);\n            }\n          }}>\n          Find\n        </Button>\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"fall\"\n          onClick={e =>\n            message.success(`Minimum is ${treeData.findMin().key}!`)\n          }>\n          FindMin\n        </Button>{' '}\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"rise\"\n          onClick={e =>\n            message.success(`Maximum is ${treeData.findMax().key}!`)\n          }>\n          FindMax\n        </Button>\n        <Button\n          style={{marginRight: '1em'}}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"right\"\n          onClick={e => {\n            const succ = treeData.succ(key);\n            if (succ === null) {\n              message.error(`There is no successor of ${key}`);\n            } else {\n              message.success(`Successor of ${key} is ${succ.key}!`);\n            }\n          }}>\n          Successor\n        </Button>\n        <Button\n          onClick={e => {\n            const pred = treeData.pred(key);\n            if (pred === null) {\n              message.error(`There is no predeccesor of ${key}`);\n            } else {\n              message.success(`Predecessor of ${key} is ${pred.key}!`);\n            }\n          }}\n          shape=\"round\"\n          type=\"primary\"\n          icon=\"left\">\n          Predecessor\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default AVLTree;\n","import React, {useState} from 'react';\nimport {Select} from 'antd';\nimport BinarySearchTree from './components/BinarySearchTree';\nimport AVLTree from './components/AVLTree';\n\nfunction DSPage(props) {\n  const [ds, setDs] = useState('BST');\n  const {Option} = Select;\n  return (\n    <div style={{textAlign: 'center', margin: '1em'}}>\n      <h1 style={{fontWeight: 'bold'}}>\n        Choose the Data Structure:\n        <Select\n          defaultValue={ds}\n          onChange={e => setDs(e)}\n          style={{margin: '0 1em', width: '12em'}}>\n          <Option value=\"BST\">Binary Search Tree</Option>\n          <Option value=\"AVL\">AVL Tree</Option>\n        </Select>\n      </h1>\n      <div>\n        {ds === 'BST' && <BinarySearchTree />}\n        {ds === 'AVL' && <AVLTree />}\n      </div>\n    </div>\n  );\n}\n\nexport default DSPage;\n","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport GraphsPage from './pages/graphs/GraphsPage';\nimport HomePage from './pages/HomePage';\nimport SearchPage from './pages/search/SearchPage';\nimport SortPage from './pages/sort/SortPage';\nimport DSPage from './pages/dataStructures/DSPage';\n\nfunction App() {\n  return (\n      <BrowserRouter>\n          <Switch>\n              <Route exact path='/' component={HomePage} />\n              <Route exact path='/graphs' component={GraphsPage} />\n              <Route exact path='/search' component={SearchPage} />\n              <Route exact path='/sort' component={SortPage} />\n              <Route exact path='/ds' component={DSPage} />\n          </Switch>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// STATE: OBJ / HASHMAP OF Repr_NODE where Repr_NODE === Array of adj nodes\nconst graphReducer = (state = {graph: {}}, action) => {\n  const newState = Object.assign({graph: {}}, state);\n  switch (action.type) {\n    case 'RESET':\n      return {graph: {}};\n    case 'ADD_NODE':\n      const newNodeId = action.node.id;\n      newState.graph[newNodeId] = [];\n      return newState;\n    case 'DEL_NODE':\n      const delNodeId = action.node.id;\n      delete newState.graph[delNodeId];\n      console.log(newState, delNodeId);\n      for (let node in newState.graph) {\n        const newArr = [];\n        for (let i = 0; i < newState.graph[node].length; i++) {\n          if (newState.graph[node][i].other !== delNodeId) {\n            //delete all edges associated with this node\n            newArr.push(newState.graph[node][i]);\n          }\n        }\n        newState.graph[node] = newArr;\n      }\n      return newState;\n    //case 'VISITED_NODE':\n    case 'ADD_EDGE':\n      const newEdge = action.edge;\n      newState.graph[newEdge.nodeA.id].push({\n        other: newEdge.nodeB.id,\n        weight: newEdge.weight,\n      });\n      newState.graph[newEdge.nodeB.id].push({\n        other: newEdge.nodeA.id,\n        weight: newEdge.weight,\n      });\n      return newState;\n    case 'MOD_EDGE':\n      const edge = action.edge;\n      for (let i = 0; i < newState.graph[edge.nodeA.id].length; i++) {\n        if (newState.graph[edge.nodeA.id][i].other === edge.nodeB.id) {\n          newState.graph[edge.nodeA.id][i].weight = edge.weight;\n          break;\n        }\n      }\n      for (let i = 0; i < newState.graph[edge.nodeB.id].length; i++) {\n        if (newState.graph[edge.nodeB.id][i].other === edge.nodeA.id) {\n          newState.graph[edge.nodeB.id][i].weight = edge.weight;\n          break;\n        }\n      }\n      return newState;\n    case 'DEL_EDGE':\n      const nodePair = action.nodePair;\n      let newArr = newState.graph[nodePair[0].id].filter(\n        otherWtP => otherWtP.other !== nodePair[1].id, //otherWtP = other-weight-pair\n      );\n      newState.graph[nodePair[0].id] = newArr;\n      newArr = newState.graph[nodePair[1].id].filter(\n        otherWtP => otherWtP.other !== nodePair[0].id,\n      );\n      newState.graph[nodePair[1].id] = newArr;\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport default graphReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport graphReducer from './redux/graphReducer';\n\nconst store = createStore(\n  graphReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}